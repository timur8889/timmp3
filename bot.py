import os
import logging
import asyncio
from datetime import datetime
import yt_dlp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import requests
import json
from urllib.parse import quote, urlencode
import base64
import hashlib
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –° –ª—é–±–æ–≤—å—é –∫ —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º - –¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤ ‚ù§Ô∏è

class YandexMusicAPI:
    def __init__(self):
        self.base_url = "https://api.music.yandex.net"
        self.token = os.getenv('YANDEX_MUSIC_TOKEN', '')
        self.headers = {
            'Authorization': f'OAuth {self.token}',
            'Accept': 'application/json'
        }
    
    async def search_tracks(self, query, limit=10):
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ"""
        if not self.token:
            return await self.mock_search(query, limit)
        
        try:
            params = {
                'text': query,
                'type': 'track',
                'page': 0,
                'pageSize': limit
            }
            
            response = requests.get(
                f"{self.base_url}/search",
                params=params,
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                return self.parse_search_results(data)
            else:
                logger.error(f"Yandex Music API error: {response.status_code}")
                return await self.mock_search(query, limit)
                
        except Exception as e:
            logger.error(f"Yandex Music search error: {e}")
            return await self.mock_search(query, limit)
    
    def parse_search_results(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
        tracks = []
        
        try:
            for item in data.get('result', {}).get('tracks', {}).get('results', [])[:10]:
                track_info = {
                    'title': item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'author': ', '.join(artist.get('name', '') for artist in item.get('artists', [])),
                    'duration': self.format_duration(item.get('durationMs', 0)),
                    'track_id': item.get('id'),
                    'album_id': item.get('albums', [{}])[0].get('id') if item.get('albums') else None,
                    'cover_url': self.get_cover_url(item),
                    'service': 'yandex'
                }
                tracks.append(track_info)
        except Exception as e:
            logger.error(f"Parse error: {e}")
        
        return tracks
    
    def get_cover_url(self, track):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –æ–±–ª–æ–∂–∫–∏"""
        try:
            cover_uri = track.get('albums', [{}])[0].get('coverUri')
            if cover_uri:
                return f"https://{cover_uri.replace('%%', '400x400')}"
        except:
            pass
        return None
    
    def format_duration(self, duration_ms):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        minutes = duration_ms // 60000
        seconds = (duration_ms % 60000) // 1000
        return f"{minutes}:{seconds:02d}"
    
    async def mock_search(self, query, limit):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)"""
        await asyncio.sleep(1)
        
        mock_tracks = [
            {
                'title': f"{query} - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫",
                'author': "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                'duration': "3:45",
                'track_id': f"ym_{hash(query)}_1",
                'service': 'yandex',
                'cover_url': None
            },
            {
                'title': f"{query} (Radio Edit)",
                'author': "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç", 
                'duration': "3:20",
                'track_id': f"ym_{hash(query)}_2",
                'service': 'yandex',
                'cover_url': None
            },
            {
                'title': f"{query} - –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è",
                'author': "Acoustic Sessions",
                'duration': "4:15",
                'track_id': f"ym_{hash(query)}_3",
                'service': 'yandex',
                'cover_url': None
            }
        ]
        
        return mock_tracks[:limit]
    
    async def get_track_info(self, track_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ"""
        try:
            response = requests.get(
                f"{self.base_url}/tracks/{track_id}",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            logger.error(f"Get track info error: {e}")
        
        return None
    
    async def get_download_url(self, track_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        try:
            response = requests.get(
                f"{self.base_url}/tracks/{track_id}/download-info",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
                # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å XML
                return f"https://api.music.yandex.net/tracks/{track_id}/download"
                
        except Exception as e:
            logger.error(f"Get download URL error: {e}")
        
        return None

class MusicBot:
    def __init__(self, token):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.user_playlists = {}
        self.user_current_track = {}
        self.yandex_music = YandexMusicAPI()
        self.setup_handlers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
        self.ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': 'downloads/%(title)s.%(ext)s',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'quiet': True
        }
        
        os.makedirs("downloads", exist_ok=True)
        os.makedirs("playlists", exist_ok=True)

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("search", self.search_command))
        self.application.add_handler(CommandHandler("ysearch", self.yandex_search_command))
        self.application.add_handler(CommandHandler("playlist", self.playlist_command))
        self.application.add_handler(CommandHandler("download", self.download_command))
        self.application.add_handler(CommandHandler("play", self.play_command))
        self.application.add_handler(CommandHandler("current", self.current_track_command))
        
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        welcome_text = f"""
üéµ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø - Music Bot –æ—Ç –¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞! üé∂

‚ú® **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–æ–π
‚Ä¢ –ü–æ–∏—Å–∫ –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üîç /search - –ü–æ–∏—Å–∫ –≤ YouTube
üéµ /ysearch - –ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
üì• /download - –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫
üéº /playlist - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
‚ñ∂Ô∏è /play - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫
‚ÑπÔ∏è /help - –ü–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏!
        """
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ YouTube", callback_data="search"),
             InlineKeyboardButton("üéµ –ü–æ–∏—Å–∫ –Ø–Ω–¥–µ–∫—Å", callback_data="ysearch")],
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫", callback_data="download"),
             InlineKeyboardButton("üéº –ú–æ–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="playlist")],
            [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", callback_data="play"),
             InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üéµ **Music Bot - –ü–æ–º–æ—â—å** üé∂

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üîç /search - –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –≤ YouTube
üéµ /ysearch - –ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
üì• /download - –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ
üéº /playlist - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
‚ñ∂Ô∏è /play - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
üéß /current - –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ - –ø–æ–∏—Å–∫ –≤ YouTube
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ysearch –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
‚Ä¢ –î–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "üéß –°–ª—É—à–∞—Ç—å" –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
‚Ä¢ –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É YouTube

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–æ–π:**
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
‚Ä¢ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ —Ç—Ä–µ–∫–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç

*–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ –Ω—É–∂–µ–Ω OAuth —Ç–æ–∫–µ–Ω*

–° –ª—é–±–æ–≤—å—é –∫ —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º - –¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤ ‚ù§Ô∏è
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ –≤ YouTube"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n`/search –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏`", parse_mode='Markdown')
            return
        
        query = " ".join(context.args)
        await self.search_youtube(update, query)

    async def yandex_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n`/ysearch –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏`", parse_mode='Markdown')
            return
        
        query = " ".join(context.args)
        await self.search_yandex_music(update, query)

    async def search_yandex_music(self, update: Update, query: str):
        """–ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ"""
        user_id = update.effective_user.id
        
        await update.message.reply_text(f"üéµ –ò—â—É –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ: `{query}`...", parse_mode='Markdown')
        
        try:
            tracks = await self.yandex_music.search_tracks(query, limit=5)
            
            if not tracks:
                await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                return
            
            for i, track in enumerate(tracks, 1):
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç—Ä–µ–∫–∞
                keyboard = [
                    [
                        InlineKeyboardButton("üéß –°–ª—É—à–∞—Ç—å", callback_data=f"yplay_{track['track_id']}"),
                        InlineKeyboardButton("üéµ –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"yadd_{track['track_id']}")
                    ],
                    [
                        InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"ydl_{track['track_id']}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
                message_text = f"""
üéµ **–†–µ–∑—É–ª—å—Ç–∞—Ç {i} (–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞)**

**–ù–∞–∑–≤–∞–Ω–∏–µ:** {track['title']}
**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {track['author']}
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {track['duration']}
**–ò—Å—Ç–æ—á–Ω–∏–∫:** –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞
                """
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
                if track.get('cover_url'):
                    try:
                        await update.message.reply_photo(
                            photo=track['cover_url'],
                            caption=message_text,
                            reply_markup=reply_markup,
                            parse_mode='Markdown'
                        )
                        continue
                    except:
                        pass
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–ª–æ–∂–∫–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Yandex search error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def search_youtube(self, update: Update, query: str):
        """–ü–æ–∏—Å–∫ –≤ YouTube"""
        await update.message.reply_text(f"üîç –ò—â—É –≤ YouTube: `{query}`...", parse_mode='Markdown')
        
        try:
            results = await self.mock_youtube_search(query)
            
            for i, result in enumerate(results[:3], 1):
                keyboard = [
                    [InlineKeyboardButton("üéµ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=f"add_{result['video_id']}"),
                     InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"dl_{result['video_id']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                message_text = f"""
üéµ **–†–µ–∑—É–ª—å—Ç–∞—Ç {i} (YouTube)**

**–ù–∞–∑–≤–∞–Ω–∏–µ:** {result['title']}
**–ê–≤—Ç–æ—Ä:** {result['author']}
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {result['duration']}
**–ò—Å—Ç–æ—á–Ω–∏–∫:** YouTube
                """
                
                await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"YouTube search error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def mock_youtube_search(self, query):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ YouTube"""
        await asyncio.sleep(1)
        
        return [
            {
                'title': f"{query} - Official Video",
                'author': "Popular Artist",
                'duration': "3:45",
                'url': f"https://youtube.com/watch?v={quote(query)}_1",
                'video_id': f'yt_{hash(query)}_1'
            },
            {
                'title': f"{query} (Official Audio)",
                'author': "Music Label",
                'duration': "4:20",
                'url': f"https://youtube.com/watch?v={quote(query)}_2",
                'video_id': f'yt_{hash(query)}_2'
            }
        ]

    async def play_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_playlists or not self.user_playlists[user_id]:
            await update.message.reply_text("‚ùå –í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫!")
            return
        
        if context.args:
            try:
                track_num = int(context.args[0]) - 1
                if 0 <= track_num < len(self.user_playlists[user_id]):
                    await self.play_track(update, user_id, track_num)
                    return
            except:
                pass
        
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
        await self.play_track(update, user_id, 0)

    async def play_track(self, update: Update, user_id: int, track_index: int):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
        playlist = self.user_playlists[user_id]
        track = playlist[track_index]
        
        self.user_current_track[user_id] = {
            'track': track,
            'index': track_index,
            'started_at': datetime.now()
        }
        
        # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ —Ç—Ä–µ–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏
        if track.get('service') == 'yandex':
            message_text = f"""
‚ñ∂Ô∏è **–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏:**

üéµ **{track['title']}**
üé§ **{track['author']}**
‚è±Ô∏è **{track['duration']}**

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏*
            """
            
            keyboard = [
                [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next_track"),
                 InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_playback")],
                [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏", callback_data=f"lyrics_{track['track_id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if track.get('cover_url'):
                try:
                    await update.message.reply_photo(
                        photo=track['cover_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    return
                except:
                    pass
            
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        else:
            # –î–ª—è YouTube —Ç—Ä–µ–∫–æ–≤
            message_text = f"""
‚ñ∂Ô∏è **–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç –∏–∑ YouTube:**

üéµ **{track['title']}**
üé§ **{track['author']}**
‚è±Ô∏è **{track['duration']}**

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º*
            """
            
            keyboard = [
                [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next_track"),
                 InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_playback")],
                [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫", callback_data=f"download_current")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def current_track_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_current_track:
            await update.message.reply_text("‚ùå –°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç")
            return
        
        current = self.user_current_track[user_id]
        track = current['track']
        
        message_text = f"""
üéß **–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:**

üéµ **{track['title']}**
üé§ **{track['author']}**
‚è±Ô∏è **{track['duration']}**
üìä **–í –ø–ª–µ–π–ª–∏—Å—Ç–µ:** {current['index'] + 1}/{len(self.user_playlists[user_id])}
        """
        
        await update.message.reply_text(message_text, parse_mode='Markdown')

    async def download_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É YouTube:\n`/download https://youtube.com/...`", parse_mode='Markdown')
            return
        
        url = context.args[0]
        await self.download_track(update, url)

    async def download_track(self, update: Update, url: str):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
        try:
            await update.message.reply_text("üì• –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            
            with yt_dlp.YoutubeDL(self.ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                filename = ydl.prepare_filename(info)
                mp3_filename = filename.rsplit('.', 1)[0] + '.mp3'
            
            with open(mp3_filename, 'rb') as audio_file:
                await update.message.reply_audio(
                    audio=audio_file,
                    title=info.get('title', 'Unknown'),
                    performer=info.get('uploader', 'Unknown'),
                    duration=info.get('duration', 0),
                    caption=f"üéµ {info.get('title', '–¢—Ä–µ–∫')}\nüì• –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!"
                )
            
            try:
                os.remove(mp3_filename)
            except:
                pass
                
        except Exception as e:
            logger.error(f"Download error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")

    async def playlist_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º"""
        user_id = update.effective_user.id
        
        if user_id not in self.user_playlists or not self.user_playlists[user_id]:
            await update.message.reply_text("üéº –í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏!")
            return
        
        playlist = self.user_playlists[user_id]
        playlist_text = "üéº **–í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç:**\n\n"
        
        for i, track in enumerate(playlist, 1):
            source_icon = "üéµ" if track.get('service') == 'yandex' else "üî¥"
            playlist_text += f"{i}. {source_icon} **{track['title']}** - {track['author']} ({track['duration']})\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", callback_data="play_playlist"),
             InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_playlist")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_playlist")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(playlist_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if 'youtube.com' in text or 'youtu.be' in text:
            await self.download_track(update, text)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ–º –≤ YouTube
            await self.search_youtube(update, text)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        try:
            if data == "search":
                await query.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ YouTube:")
            elif data == "ysearch":
                await query.edit_message_text("üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ:")
            elif data == "download":
                await query.edit_message_text("üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ:")
            elif data == "playlist":
                await self.show_playlist(query)
            elif data == "play":
                await self.play_from_button(query)
            elif data == "help":
                await self.show_help(query)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
            elif data.startswith("yplay_"):
                track_id = data[6:]
                await self.play_yandex_track(query, track_id)
            elif data.startswith("yadd_"):
                track_id = data[5:]
                await self.add_yandex_to_playlist(query, track_id)
            elif data.startswith("ydl_"):
                track_id = data[4:]
                await query.edit_message_text("üì• –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏")
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
            elif data == "next_track":
                await self.next_track(query)
            elif data == "stop_playback":
                await self.stop_playback(query)
            elif data == "play_playlist":
                await self.play_from_playlist(query)
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
            elif data.startswith("add_"):
                video_id = data[4:]
                await self.add_to_playlist(query, video_id, 'youtube')
            elif data.startswith("dl_"):
                video_id = data[3:]
                await query.edit_message_text("üì• –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/download [—Å—Å—ã–ª–∫–∞ YouTube]`")
            elif data == "clear_playlist":
                await self.clear_playlist(query)
            elif data == "save_playlist":
                await self.save_playlist(query)
                
        except Exception as e:
            logger.error(f"Button handler error: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def play_yandex_track(self, query, track_id):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        track_info = await self.yandex_music.get_track_info(track_id)
        
        if track_info:
            track_data = track_info.get('result', [{}])[0]
            title = track_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            artists = ', '.join(artist.get('name', '') for artist in track_data.get('artists', []))
            duration = self.yandex_music.format_duration(track_data.get('durationMs', 0))
            
            message_text = f"""
üéß **–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏:**

üéµ **{title}**
üé§ **{artists}**  
‚è±Ô∏è **{duration}**

*–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏*
*–î–æ—Å—Ç—É–ø–Ω–æ 30 —Å–µ–∫—É–Ω–¥ preview*
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = query.from_user.id
            self.user_current_track[user_id] = {
                'track': {
                    'title': title,
                    'author': artists,
                    'duration': duration,
                    'track_id': track_id,
                    'service': 'yandex'
                },
                'index': 0,
                'started_at': datetime.now()
            }
            
            await query.edit_message_text(message_text, parse_mode='Markdown')
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ")

    async def add_yandex_to_playlist(self, query, track_id):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        track_info = await self.yandex_music.get_track_info(track_id)
        
        if track_info:
            track_data = track_info.get('result', [{}])[0]
            
            track_item = {
                'title': track_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'author': ', '.join(artist.get('name', '') for artist in track_data.get('artists', [])),
                'duration': self.yandex_music.format_duration(track_data.get('durationMs', 0)),
                'track_id': track_id,
                'service': 'yandex',
                'cover_url': self.yandex_music.get_cover_url(track_data)
            }
            
            if user_id not in self.user_playlists:
                self.user_playlists[user_id] = []
            
            self.user_playlists[user_id].append(track_item)
            await query.edit_message_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç!\n\nüéµ {track_item['title']}\nüé§ {track_item['author']}")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç")

    async def play_from_button(self, query):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –∫–Ω–æ–ø–∫–∏"""
        user_id = query.from_user.id
        await self.play_track_from_query(query, user_id, 0)

    async def play_from_playlist(self, query):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        user_id = query.from_user.id
        await self.play_track_from_query(query, user_id, 0)

    async def play_track_from_query(self, query, user_id, track_index):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ callback query"""
        if user_id not in self.user_playlists or not self.user_playlists[user_id]:
            await query.edit_message_text("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç!")
            return
        
        playlist = self.user_playlists[user_id]
        track = playlist[track_index]
        
        self.user_current_track[user_id] = {
            'track': track,
            'index': track_index,
            'started_at': datetime.now()
        }
        
        message_text = f"""
‚ñ∂Ô∏è **–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:**

üéµ **{track['title']}**
üé§ **{track['author']}**
‚è±Ô∏è **{track['duration']}**
        """
        
        await query.edit_message_text(message_text, parse_mode='Markdown')

    async def next_track(self, query):
        """–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
        user_id = query.from_user.id
        
        if user_id not in self.user_current_track:
            await query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
            return
        
        current = self.user_current_track[user_id]
        next_index = (current['index'] + 1) % len(self.user_playlists[user_id])
        
        await self.play_track_from_query(query, user_id, next_index)

    async def stop_playback(self, query):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        user_id = query.from_user.id
        
        if user_id in self.user_current_track:
            del self.user_current_track[user_id]
        
        await query.edit_message_text("‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def add_to_playlist(self, query, video_id, service='youtube'):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
        user_id = query.from_user.id
        
        if user_id not in self.user_playlists:
            self.user_playlists[user_id] = []
        
        track_info = {
            'title': f"–¢—Ä–µ–∫ {video_id}",
            'author': "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
            'duration': "3:00",
            'video_id': video_id,
            'service': service
        }
        
        self.user_playlists[user_id].append(track_info)
        await query.edit_message_text(f"‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç!\n\nüéµ {track_info['title']}")

    async def show_playlist(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"""
        user_id = query.from_user.id
        
        if user_id not in self.user_playlists or not self.user_playlists[user_id]:
            await query.edit_message_text("üéº –í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏!")
            return
        
        playlist = self.user_playlists[user_id]
        playlist_text = "üéº **–í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç:**\n\n"
        
        for i, track in enumerate(playlist, 1):
            source_icon = "üéµ" if track.get('service') == 'yandex' else "üî¥"
            playlist_text += f"{i}. {source_icon} **{track['title']}** - {track['author']} ({track['duration']})\n"
        
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", callback_data="play_playlist"),
             InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_playlist")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_playlist")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(playlist_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
        help_text = """
üéµ **Music Bot - –ü–æ–º–æ—â—å** üé∂

**–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–æ–π
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –æ–±–µ–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
‚Ä¢ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
üîç /search - –ü–æ–∏—Å–∫ –≤ YouTube
üéµ /ysearch - –ü–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–µ
üì• /download - –°–∫–∞—á–∞—Ç—å –∏–∑ YouTube
üéº /playlist - –í–∞—à –ø–ª–µ–π–ª–∏—Å—Ç
‚ñ∂Ô∏è /play - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
üéß /current - –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫

–° –ª—é–±–æ–≤—å—é –∫ —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º - –¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤ ‚ù§Ô∏è
        """
        await query.edit_message_text(help_text, parse_mode='Markdown')

    async def clear_playlist(self, query):
        """–û—á–∏—Å—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        user_id = query.from_user.id
        self.user_playlists[user_id] = []
        await query.edit_message_text("üßπ –ü–ª–µ–π–ª–∏—Å—Ç –æ—á–∏—â–µ–Ω!")

    async def save_playlist(self, query):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        user_id = query.from_user.id
        
        if user_id not in self.user_playlists or not self.user_playlists[user_id]:
            await query.edit_message_text("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç!")
            return
        
        playlist_data = {
            'user_id': user_id,
            'username': query.from_user.username,
            'created_at': datetime.now().isoformat(),
            'tracks': self.user_playlists[user_id]
        }
        
        filename = f"playlist_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = os.path.join("playlists", filename)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(playlist_data, f, ensure_ascii=False, indent=2)
            await query.edit_message_text(f"üíæ –ü–ª–µ–π–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n–§–∞–π–ª: `{filename}`", parse_mode='Markdown')
        except Exception as e:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üéµ Music Bot —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–æ–π –∑–∞–ø—É—â–µ–Ω!")
        print("‚ú® –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–æ–π –∞–∫—Ç–∏–≤–Ω–∞")
        print("–° –ª—é–±–æ–≤—å—é –∫ —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º - –¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤ ‚ù§Ô∏è")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
    
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN")
        print("–ü–æ–ª—É—á–∏—Ç–µ —É @BotFather –≤ Telegram")
        exit(1)
    
    bot = MusicBot(BOT_TOKEN)
    bot.run()
