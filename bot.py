import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import pygame
import os
import requests
from urllib.parse import quote
import json
import threading
import time
from datetime import datetime
import yt_dlp
import asyncio
import sys

# –° –ª—é–±–æ–≤—å—é –∫ —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º - –¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤ ‚ù§Ô∏è

class MusicBot:
    def __init__(self, root):
        self.root = root
        self.root.title("üéµ Music Bot - –¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤")
        self.root.geometry("1000x700")
        self.root.configure(bg='#1e1e1e')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        pygame.mixer.init()
        self.current_track = None
        self.playing = False
        self.paused = False
        self.playlist = []
        self.current_index = 0
        self.volume = 0.7
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_file = "music_bot_settings.json"
        self.settings = self.load_settings()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs("downloads", exist_ok=True)
        os.makedirs("playlists", exist_ok=True)
        
        self.create_widgets()
        self.apply_settings()
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_settings = {
            "theme": "dark",
            "volume": 0.7,
            "download_path": "downloads",
            "auto_play": True,
            "search_provider": "youtube"
        }
        
        try:
            if os.path.exists(self.settings_file):
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        return default_settings
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def apply_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.volume = self.settings["volume"]
        pygame.mixer.music.set_volume(self.volume)
        os.makedirs(self.settings["download_path"], exist_ok=True)
    
    def create_widgets(self):
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.configure('Custom.TButton', background='#3498db', foreground='white')
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill='x', pady=(0, 10))
        
        title = tk.Label(title_frame, text="üéµ Music Bot", 
                        font=('Arial', 20, 'bold'), 
                        bg='#1e1e1e', fg='white')
        title.pack()
        
        subtitle = tk.Label(title_frame, text="–ü–æ–∏—Å–∫, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏", 
                           font=('Arial', 10), 
                           bg='#1e1e1e', fg='#bdc3c7')
        subtitle.pack()
        
        # –§—Ä–µ–π–º –ø–æ–∏—Å–∫–∞
        search_frame = ttk.LabelFrame(main_frame, text="üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", padding=10)
        search_frame.pack(fill='x', pady=(0, 10))
        
        search_input_frame = ttk.Frame(search_frame)
        search_input_frame.pack(fill='x')
        
        self.search_entry = ttk.Entry(search_input_frame, font=('Arial', 12))
        self.search_entry.pack(side='left', fill='x', expand=True, padx=(0, 10))
        self.search_entry.bind('<Return>', lambda e: self.search_music())
        
        self.search_btn = ttk.Button(search_input_frame, text="–ò—Å–∫–∞—Ç—å", 
                                   command=self.search_music)
        self.search_btn.pack(side='left')
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results_frame = ttk.LabelFrame(main_frame, text="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", padding=10)
        results_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        columns = ('#', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ—Ä', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–î–µ–π—Å—Ç–≤–∏—è')
        self.results_tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.results_tree.heading('#', text='#')
        self.results_tree.heading('–ù–∞–∑–≤–∞–Ω–∏–µ', text='–ù–∞–∑–≤–∞–Ω–∏–µ')
        self.results_tree.heading('–ê–≤—Ç–æ—Ä', text='–ê–≤—Ç–æ—Ä')
        self.results_tree.heading('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', text='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
        self.results_tree.heading('–î–µ–π—Å—Ç–≤–∏—è', text='–î–µ–π—Å—Ç–≤–∏—è')
        
        self.results_tree.column('#', width=50)
        self.results_tree.column('–ù–∞–∑–≤–∞–Ω–∏–µ', width=300)
        self.results_tree.column('–ê–≤—Ç–æ—Ä', width=200)
        self.results_tree.column('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', width=100)
        self.results_tree.column('–î–µ–π—Å—Ç–≤–∏—è', width=150)
        
        self.results_tree.pack(fill='both', expand=True)
        
        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(results_frame, orient='vertical', command=self.results_tree.yview)
        scrollbar.pack(side='right', fill='y')
        self.results_tree.configure(yscrollcommand=scrollbar.set)
        
        # –§—Ä–µ–π–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–µ—Ä–æ–º
        player_frame = ttk.LabelFrame(main_frame, text="üéµ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å", padding=10)
        player_frame.pack(fill='x', pady=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
        self.current_track_label = tk.Label(player_frame, text="–¢—Ä–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", 
                                          font=('Arial', 12, 'bold'), 
                                          bg='#1e1e1e', fg='white')
        self.current_track_label.pack(anchor='w')
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(player_frame)
        control_frame.pack(fill='x', pady=10)
        
        self.play_btn = ttk.Button(control_frame, text="‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", 
                                 command=self.play_music, state='disabled')
        self.play_btn.pack(side='left', padx=5)
        
        self.pause_btn = ttk.Button(control_frame, text="‚è∏Ô∏è –ü–∞—É–∑–∞", 
                                  command=self.pause_music, state='disabled')
        self.pause_btn.pack(side='left', padx=5)
        
        self.stop_btn = ttk.Button(control_frame, text="‚èπÔ∏è –°—Ç–æ–ø", 
                                 command=self.stop_music, state='disabled')
        self.stop_btn.pack(side='left', padx=5)
        
        self.next_btn = ttk.Button(control_frame, text="‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π", 
                                 command=self.next_track, state='disabled')
        self.next_btn.pack(side='left', padx=5)
        
        self.prev_btn = ttk.Button(control_frame, text="‚èÆÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", 
                                 command=self.previous_track, state='disabled')
        self.prev_btn.pack(side='left', padx=5)
        
        # –ì—Ä–æ–º–∫–æ—Å—Ç—å
        volume_frame = ttk.Frame(player_frame)
        volume_frame.pack(fill='x', pady=5)
        
        tk.Label(volume_frame, text="–ì—Ä–æ–º–∫–æ—Å—Ç—å:", bg='#1e1e1e', fg='white').pack(side='left')
        self.volume_scale = ttk.Scale(volume_frame, from_=0, to=1, orient='horizontal',
                                    command=self.change_volume)
        self.volume_scale.set(self.volume)
        self.volume_scale.pack(side='left', fill='x', expand=True, padx=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.progress = ttk.Progressbar(player_frame, mode='determinate')
        self.progress.pack(fill='x', pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(player_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                                   font=('Arial', 10), 
                                   bg='#1e1e1e', fg='#27ae60')
        self.status_label.pack(anchor='w')
        
        # –§—Ä–µ–π–º –ø–ª–µ–π–ª–∏—Å—Ç–∞
        playlist_frame = ttk.LabelFrame(main_frame, text="üéº –¢–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç", padding=10)
        playlist_frame.pack(fill='both', expand=True, pady=(0, 10))
        
        self.playlist_text = scrolledtext.ScrolledText(playlist_frame, height=6, 
                                                     font=('Arial', 10))
        self.playlist_text.pack(fill='both', expand=True)
        self.update_playlist_display()
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        bottom_frame = ttk.Frame(main_frame)
        bottom_frame.pack(fill='x')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(bottom_frame)
        btn_frame.pack(side='left')
        
        ttk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", 
                 command=self.save_playlist).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", 
                 command=self.load_playlist).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", 
                 command=self.clear_playlist).pack(side='left', padx=5)
        
        # –ü–æ–¥–ø–∏—Å—å
        signature = tk.Label(bottom_frame, 
                           text="–° –ª—é–±–æ–≤—å—é –∫ —Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º - –¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤ ‚ù§Ô∏è", 
                           font=('Arial', 10, 'bold'), 
                           bg='#1e1e1e', fg='#e74c3c')
        signature.pack(side='right')
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.update_progress()
    
    def search_music(self):
        """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏"""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        self.status_label.config(text="üîç –ü–æ–∏—Å–∫...", fg='#f39c12')
        self.search_btn.config(state='disabled')
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._search_music_thread, args=(query,), daemon=True).start()
    
    def _search_music_thread(self, query):
        """–ü–æ—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ YouTube/–∑–≤—É–∫–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            results = self.mock_search(query)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self._display_search_results, results)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"))
            self.root.after(0, lambda: self.status_label.config(text="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", fg='#e74c3c'))
        finally:
            self.root.after(0, lambda: self.search_btn.config(state='normal'))
    
    def mock_search(self, query):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YouTube API –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–∏—Å–∫–∞
        
        mock_results = [
            {
                'title': f"{query} - –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫",
                'author': "–ò–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                'duration': "3:45",
                'url': f"https://example.com/{quote(query)}",
                'video_id': '1'
            },
            {
                'title': f"{query} (Remix)",
                'author': "DJ Remixer",
                'duration': "4:20",
                'url': f"https://example.com/{quote(query)}_remix",
                'video_id': '2'
            },
            {
                'title': f"{query} - –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è",
                'author': "–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
                'duration': "3:15",
                'url': f"https://example.com/{quote(query)}_acoustic",
                'video_id': '3'
            },
            {
                'title': f"–õ—É—á—à–∞—è –≤–µ—Ä—Å–∏—è {query}",
                'author': "–†–∞–∑–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏",
                'duration': "5:10",
                'url': f"https://example.com/best_{quote(query)}",
                'video_id': '4'
            }
        ]
        
        return mock_results
    
    def _display_search_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for i, result in enumerate(results, 1):
            self.results_tree.insert('', 'end', values=(
                i,
                result['title'],
                result['author'],
                result['duration'],
                "üéµ –î–æ–±–∞–≤–∏—Ç—å üéµ"
            ), tags=(result['video_id'],))
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        self.results_tree.bind('<Button-1>', self.on_tree_click)
        
        self.status_label.config(text=f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}", fg='#27ae60')
    
    def on_tree_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ"""
        item = self.results_tree.identify_row(event.y)
        column = self.results_tree.identify_column(event.x)
        
        if item and column == '#5':  # –ö–æ–ª–æ–Ω–∫–∞ "–î–µ–π—Å—Ç–≤–∏—è"
            video_id = self.results_tree.item(item)['tags'][0]
            track_info = self.get_track_info_from_tree(item)
            self.add_to_playlist(track_info)
    
    def get_track_info_from_tree(self, item):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        values = self.results_tree.item(item)['values']
        return {
            'title': values[1],
            'author': values[2],
            'duration': values[3],
            'video_id': self.results_tree.item(item)['tags'][0]
        }
    
    def add_to_playlist(self, track_info):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
        self.playlist.append(track_info)
        self.update_playlist_display()
        
        if len(self.playlist) == 1 and self.settings['auto_play']:
            self.play_selected_track(0)
        
        self.status_label.config(text=f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {track_info['title']}", fg='#27ae60')
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if len(self.playlist) > 0:
            self.play_btn.config(state='normal')
            self.next_btn.config(state='normal')
            self.prev_btn.config(state='normal')
    
    def update_playlist_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        self.playlist_text.delete(1.0, tk.END)
        
        for i, track in enumerate(self.playlist, 1):
            status = "‚ñ∂Ô∏è " if i-1 == self.current_index and self.playing else ""
            self.playlist_text.insert(tk.END, 
                                    f"{status}{i}. {track['title']} - {track['author']} ({track['duration']})\n")
    
    def play_selected_track(self, index):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞"""
        if index < 0 or index >= len(self.playlist):
            return
        
        self.current_index = index
        track = self.playlist[index]
        self.current_track = track
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)
        self.playing = True
        self.paused = False
        
        self.current_track_label.config(text=f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {track['title']} - {track['author']}")
        self.play_btn.config(state='disabled')
        self.pause_btn.config(state='normal')
        self.stop_btn.config(state='normal')
        
        self.status_label.config(text=f"üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {track['title']}", fg='#3498db')
        self.update_playlist_display()
        
        # –ó–∞–ø—É—Å–∫ –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress['maximum'] = 100
        self.progress['value'] = 0
    
    def play_music(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏"""
        if not self.playlist:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç")
            return
        
        if self.paused:
            # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
            pygame.mixer.music.unpause()
            self.paused = False
            self.play_btn.config(state='disabled')
            self.pause_btn.config(state='normal')
            self.status_label.config(text="‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ", fg='#3498db')
        else:
            # –ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞
            self.play_selected_track(self.current_index)
    
    def pause_music(self):
        """–ü–∞—É–∑–∞ –º—É–∑—ã–∫–∏"""
        if self.playing and not self.paused:
            pygame.mixer.music.pause()
            self.paused = True
            self.play_btn.config(state='normal')
            self.pause_btn.config(state='disabled')
            self.status_label.config(text="‚è∏Ô∏è –ü–∞—É–∑–∞", fg='#f39c12')
    
    def stop_music(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º—É–∑—ã–∫–∏"""
        pygame.mixer.music.stop()
        self.playing = False
        self.paused = False
        self.play_btn.config(state='normal')
        self.pause_btn.config(state='disabled')
        self.stop_btn.config(state='disabled')
        self.progress['value'] = 0
        self.status_label.config(text="‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg='#e74c3c')
    
    def next_track(self):
        """–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
        if not self.playlist:
            return
        
        next_index = (self.current_index + 1) % len(self.playlist)
        self.play_selected_track(next_index)
    
    def previous_track(self):
        """–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"""
        if not self.playlist:
            return
        
        prev_index = (self.current_index - 1) % len(self.playlist)
        self.play_selected_track(prev_index)
    
    def change_volume(self, value):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        self.volume = float(value)
        pygame.mixer.music.set_volume(self.volume)
        self.settings['volume'] = self.volume
        self.save_settings()
    
    def update_progress(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.playing and not self.paused:
            current_value = self.progress['value']
            if current_value < self.progress['maximum']:
                self.progress['value'] = current_value + 1
            else:
                # –¢—Ä–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                self.next_track()
        
        self.root.after(1000, self.update_progress)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    def save_playlist(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        if not self.playlist:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç")
            return
        
        filename = f"playlist_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = os.path.join("playlists", filename)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.playlist, f, ensure_ascii=False, indent=2)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–ª–µ–π–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç: {str(e)}")
    
    def load_playlist(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        try:
            from tkinter import filedialog
            filepath = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–ª–µ–π–ª–∏—Å—Ç–∞",
                initialdir="playlists",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if filepath:
                with open(filepath, 'r', encoding='utf-8') as f:
                    self.playlist = json.load(f)
                
                self.current_index = 0
                self.update_playlist_display()
                
                if self.playlist and self.settings['auto_play']:
                    self.play_btn.config(state='normal')
                    self.next_btn.config(state='normal')
                    self.prev_btn.config(state='normal')
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(self.playlist)}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç: {str(e)}")
    
    def clear_playlist(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
        if self.playlist:
            result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –ø–ª–µ–π–ª–∏—Å—Ç?")
            if result:
                self.playlist.clear()
                self.current_index = 0
                self.stop_music()
                self.update_playlist_display()
                self.current_track_label.config(text="–¢—Ä–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω")
                self.status_label.config(text="–ü–ª–µ–π–ª–∏—Å—Ç –æ—á–∏—â–µ–Ω", fg='#27ae60')

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = MusicBot(root)
    root.mainloop()
