import os
import logging
import asyncio
from telegram import Update, InlineQueryResultAudio, InputTextMessageContent
from telegram.ext import Application, CommandHandler, InlineQueryHandler, ContextTypes
import aiohttp
import json
from typing import List, Dict
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class YandexMusicBot:
    def __init__(self, token: str, yandex_token: str = None):
        self.token = token
        self.yandex_token = yandex_token or os.getenv('YANDEX_MUSIC_TOKEN')
        self.app = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(CommandHandler("search", self.search_command))
        self.app.add_handler(InlineQueryHandler(self.inline_query))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "üéµ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –ë–æ—Ç\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/search <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–∏—Å–∫ –º—É–∑—ã–∫–∏\n"
            "–ò–ª–∏ –≤ –ª—é–±–æ–º —á–∞—Ç–µ: @your_bot_username <–∑–∞–ø—Ä–æ—Å>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /search –ó–µ–º—Ñ–∏—Ä–∞"
        )
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "üéµ –ü–æ–º–æ—â—å –ø–æ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –±–æ—Ç—É:\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –º—É–∑—ã–∫–∏\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "Inline —Ä–µ–∂–∏–º:\n"
            "–í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ @your_bot_username –∏ –∑–∞–ø—Ä–æ—Å"
        )
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞\n–ü—Ä–∏–º–µ—Ä: /search –ó–µ–º—Ñ–∏—Ä–∞")
            return
        
        query = ' '.join(context.args)
        await update.message.reply_text(f"üîç –ò—â—É: {query}...")
        
        results = await self.search_yandex_music(query)
        
        if not results:
            await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        message_text = "üéµ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:\n\n"
        for i, track in enumerate(results[:5], 1):
            message_text += f"{i}. {track['artist']} - {track['title']}\n"
        
        message_text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç—ã!"
        await update.message.reply_text(message_text)
    
    async def search_yandex_music(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ API"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏
            search_url = "https://api.music.yandex.net/search"
            params = {
                'text': query,
                'type': 'track',
                'page': 0,
                'pageSize': 20
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(search_url, headers=headers, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self.parse_search_results(data)
                    else:
                        logging.error(f"API error: {response.status}")
                        return await self.fallback_search(query)
                        
        except Exception as e:
            logging.error(f"Search error: {e}")
            return await self.fallback_search(query)
    
    def parse_search_results(self, data: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        results = []
        
        try:
            tracks = data.get('result', {}).get('tracks', {}).get('results', [])
            
            for track in tracks:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫
                download_info = track.get('downloadInfo', [])
                if download_info:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Å—ã–ª–∫—É
                    audio_url = download_info[0].get('downloadUrl')
                else:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
                    audio_url = f"https://music.yandex.ru/album/{track['albums'][0]['id']}/track/{track['id']}"
                
                results.append({
                    'id': track['id'],
                    'title': track['title'],
                    'artist': ', '.join(artist['name'] for artist in track['artists']),
                    'duration': track.get('durationMs', 0) // 1000,
                    'url': audio_url,
                    'thumbnail': f"https://{track['coverUri'].replace('%%', '400x400')}" if track.get('coverUri') else None
                })
                
        except Exception as e:
            logging.error(f"Parse error: {e}")
        
        return results
    
    async def fallback_search(self, query: str) -> List[Dict]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json',
            }
            
            search_url = f"https://music.yandex.ru/handlers/music-search.jsx"
            params = {
                'text': query,
                'type': 'tracks',
                'page': 0
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(search_url, headers=headers, params=params) as response:
                    if response.status == 200:
                        text = await response.text()
                        data = json.loads(text)
                        return self.parse_fallback_results(data)
                    else:
                        return []
                        
        except Exception as e:
            logging.error(f"Fallback search error: {e}")
            return []
    
    def parse_fallback_results(self, data: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        results = []
        
        try:
            tracks = data.get('tracks', {}).get('items', [])
            
            for track in tracks[:15]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                track_info = track.get('track') or track
                
                results.append({
                    'id': track_info['id'],
                    'title': track_info['title'],
                    'artist': ', '.join(artist['name'] for artist in track_info['artists']),
                    'duration': track_info.get('durationMs', 0) // 1000,
                    'url': f"https://music.yandex.ru/album/{track_info['albums'][0]['id']}/track/{track_info['id']}",
                    'thumbnail': f"https://{track_info['coverUri'].replace('%%', '300x300')}" if track_info.get('coverUri') else None
                })
                
        except Exception as e:
            logging.error(f"Fallback parse error: {e}")
        
        return results
    
    async def inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.inline_query.query
        
        if not query or len(query) < 2:
            return
        
        logging.info(f"Inline search: {query}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∏—â—É..." —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.inline_query.answer([
            InlineQueryResultAudio(
                id="searching",
                audio_url="https://example.com/placeholder.mp3",
                title="–ò—â–µ–º –º—É–∑—ã–∫—É...",
                performer="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
            )
        ], cache_time=1)
        
        # –ò—â–µ–º –º—É–∑—ã–∫—É
        results = await self.search_yandex_music(query)
        
        inline_results = []
        
        for i, track in enumerate(results[:50]):  # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            try:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞—É–¥–∏–æ
                result = InlineQueryResultAudio(
                    id=str(track['id']),
                    audio_url=track['url'],
                    title=track['title'][:64],
                    performer=track['artist'][:64],
                    audio_duration=track['duration'],
                    caption=f"üéµ {track['title']}\nüé§ {track['artist']}\n\nüíø –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞"
                )
                inline_results.append(result)
                
            except Exception as e:
                logging.error(f"Error creating inline result: {e}")
                continue
        
        await update.inline_query.answer(inline_results, cache_time=300)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üéµ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.app.run_polling()

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ yandex-music
class YandexMusicAPIBot(YandexMusicBot):
    def __init__(self, token: str, yandex_token: str = None):
        try:
            from yandex_music import Client
            self.yandex_client = Client(yandex_token).init() if yandex_token else None
        except ImportError:
            self.yandex_client = None
            logging.warning("yandex-music-api not installed, using web API")
        
        super().__init__(token, yandex_token)
    
    async def search_yandex_music(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É yandex-music"""
        if not self.yandex_client:
            return await super().search_yandex_music(query)
        
        try:
            search_result = self.yandex_client.search(query)
            
            if not search_result or not search_result.tracks:
                return []
            
            results = []
            for track in search_result.tracks.results[:20]:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                download_info = track.get_download_info()
                audio_url = None
                
                if download_info:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫
                    for info in download_info:
                        if info.codec == 'mp3':
                            audio_url = info.get_direct_link()
                            break
                
                results.append({
                    'id': track.id,
                    'title': track.title,
                    'artist': ', '.join(artist.name for artist in track.artists),
                    'duration': track.duration_ms // 1000,
                    'url': audio_url or f"https://music.yandex.ru/album/{track.albums[0].id}/track/{track.id}",
                    'thumbnail': f"https://{track.cover_uri.replace('%%', '400x400')}" if track.cover_uri else None
                })
            
            return results
            
        except Exception as e:
            logging.error(f"Yandex Music API error: {e}")
            return await super().search_yandex_music(query)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
    
    # –¢–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    YANDEX_TOKEN = os.getenv('YANDEX_MUSIC_TOKEN') or "YOUR_YANDEX_TOKEN"
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é API
        bot = YandexMusicAPIBot(BOT_TOKEN, YANDEX_TOKEN)
    except:
        # Fallback –Ω–∞ –≤–µ–±-–≤–µ—Ä—Å–∏—é
        bot = YandexMusicBot(BOT_TOKEN, YANDEX_TOKEN)
    
    bot.run()
