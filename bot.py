import os
import logging
import asyncio
from telegram import Update, InlineQueryResultAudio, InputTextMessageContent, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, InlineQueryHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import aiohttp
import json
from typing import List, Dict
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class YandexMusicBot:
    def __init__(self, token: str, yandex_token: str = None):
        self.token = token
        self.yandex_token = yandex_token or os.getenv('YANDEX_MUSIC_TOKEN')
        self.app = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(CommandHandler("search", self.search_command))
        self.app.add_handler(CommandHandler("menu", self.show_menu))
        self.app.add_handler(InlineQueryHandler(self.inline_query))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏"), KeyboardButton("üéµ –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ")],
            [KeyboardButton("üìñ –ü–æ–º–æ—â—å"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
    
    def get_search_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        keyboard = [
            [KeyboardButton("üé∏ –†–æ–∫"), KeyboardButton("üé§ –ü–æ–ø"), KeyboardButton("üéß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")],
            [KeyboardButton("üéµ –ö–ª–∞—Å—Å–∏–∫–∞"), KeyboardButton("üéº –î–∂–∞–∑"), KeyboardButton("üéπ –•–∏–ø-—Ö–æ–ø")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_track_actions_keyboard(self, track_id: str, track_url: str):
        """–ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–µ–∫–æ–º"""
        keyboard = [
            [
                InlineKeyboardButton("üéµ –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{track_id}"),
                InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å", url=track_url)
            ],
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=f"add_{track_id}"),
                InlineKeyboardButton("üîç –ü–æ—Ö–æ–∂–∏–µ", callback_data=f"similar_{track_id}")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –ë–æ—Ç!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ –ø–æ—Å–ª—É—à–∞—Ç—å –ª—é–±—É—é –º—É–∑—ã–∫—É.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        if update.message:
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.get_main_keyboard()
            )
    
    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.get_main_keyboard()
        )
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üéµ –ü–æ–º–æ—â—å –ø–æ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –±–æ—Ç—É:\n\n"
            "üîç **–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏'\n"
            "‚Ä¢ –ò–ª–∏ –∫–æ–º–∞–Ω–¥—É /search <–∑–∞–ø—Ä–æ—Å>\n"
            "‚Ä¢ –ò–ª–∏ inline —Ä–µ–∂–∏–º: @your_bot_username <–∑–∞–ø—Ä–æ—Å>\n\n"
            "üéØ **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º:**\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ' –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–±–æ—Ä–æ–∫\n\n"
            "üì± **Inline —Ä–µ–∂–∏–º:**\n"
            "–í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ @your_bot_username –∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")],
            [InlineKeyboardButton("üìö –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="examples")]
        ]
        
        await update.message.reply_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        if not context.args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            await update.message.reply_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                reply_markup=self.get_search_keyboard()
            )
            return
        
        query = ' '.join(context.args)
        await self.perform_search(update, query)
    
    async def perform_search(self, update: Update, query: str, page: int = 0):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            search_message = await update.message.reply_text(f"üîç –ò—â—É: **{query}**...", parse_mode='Markdown')
            
            results = await self.search_yandex_music(query)
            
            if not results:
                await search_message.edit_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É **{query}** –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode='Markdown')
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            message_text = f"üéµ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É **{query}**:\n\n"
            for i, track in enumerate(results[:5], 1):
                message_text += f"{i}. **{track['title']}** - {track['artist']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = []
            for i, track in enumerate(results[:3], 1):
                keyboard.append([
                    InlineKeyboardButton(
                        f"üéµ {i}. {track['title'][:15]}...", 
                        callback_data=f"play_{track['id']}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("üîç –ò—Å–∫–∞—Ç—å –µ—â–µ", switch_inline_query_current_chat=query),
                InlineKeyboardButton("üìÑ –°–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"next_{query}_1")
            ])
            
            await search_message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Search error: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("play_"):
            track_id = data.split("_")[1]
            await self.play_track(query, track_id)
        
        elif data.startswith("download_"):
            track_id = data.split("_")[1]
            await self.download_track(query, track_id)
        
        elif data.startswith("next_"):
            parts = data.split("_")
            search_query = parts[1]
            page = int(parts[2])
            await self.show_next_results(query, search_query, page)
        
        elif data == "examples":
            await self.show_examples(query)
    
    async def play_track(self, query, track_id):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫"""
        await query.edit_message_text(
            "üéµ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ç—Ä–µ–∫...\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–æ–≤"
        )
    
    async def download_track(self, query, track_id):
        """–°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫"""
        await query.edit_message_text(
            "üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...\n\n"
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"
        )
    
    async def show_next_results(self, query, search_query, page):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            results = await self.search_yandex_music(search_query)
            
            if not results or len(results) <= page * 5:
                await query.edit_message_text("‚ùå –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
                return
            
            start_idx = page * 5
            end_idx = start_idx + 5
            
            message_text = f"üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É **{search_query}** (—Å—Ç—Ä. {page+1}):\n\n"
            for i, track in enumerate(results[start_idx:end_idx], start_idx + 1):
                message_text += f"{i}. **{track['title']}** - {track['artist']}\n"
            
            keyboard = []
            for i, track in enumerate(results[start_idx:start_idx+3], start_idx + 1):
                keyboard.append([
                    InlineKeyboardButton(
                        f"üéµ {i}. {track['title'][:15]}...", 
                        callback_data=f"play_{track['id']}"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_buttons = []
            if page > 0:
                pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"next_{search_query}_{page-1}"))
            
            if len(results) > end_idx:
                pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{search_query}_{page+1}"))
            
            if pagination_buttons:
                keyboard.append(pagination_buttons)
            
            keyboard.append([
                InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")
            ])
            
            await query.edit_message_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Next results error: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    async def show_examples(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        examples_text = (
            "üéØ **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞:**\n\n"
            "‚Ä¢ `–ó–µ–º—Ñ–∏—Ä–∞` - –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
            "‚Ä¢ `–õ—é–±—ç –ü–æ–∑–æ–≤–∏ –º–µ–Ω—è` - —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ `—Ä–æ–∫ 90-—Ö` - –º—É–∑—ã–∫–∞ –ø–æ –∂–∞–Ω—Ä—É\n"
            "‚Ä¢ `—Å–∞—É–Ω–¥—Ç—Ä–µ–∫ –∏–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä` - —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∏\n"
            "‚Ä¢ `–¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏` - –ø–æ–¥–±–æ—Ä–∫–∏\n\n"
            "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline —Ä–µ–∂–∏–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")],
            [InlineKeyboardButton("üéµ –°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫", callback_data="random")]
        ]
        
        await query.edit_message_text(
            examples_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)"""
        text = update.message.text
        
        if text == "üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                reply_markup=self.get_search_keyboard()
            )
        
        elif text == "üéµ –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ":
            await self.show_popular(update)
        
        elif text == "üìñ –ü–æ–º–æ—â—å":
            await self.help(update, context)
        
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n–î–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!")
        
        elif text == "üîô –ù–∞–∑–∞–¥":
            await self.show_menu(update, context)
        
        elif text in ["üé∏ –†–æ–∫", "üé§ –ü–æ–ø", "üéß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "üéµ –ö–ª–∞—Å—Å–∏–∫–∞", "üéº –î–∂–∞–∑", "üéπ –•–∏–ø-—Ö–æ–ø"]:
            genre = text.split(" ")[1]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            await self.search_by_genre(update, genre)
        
        elif text.startswith("üéØ "):
            query = text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            await self.perform_search(update, query)
        
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            await self.perform_search(update, text)
    
    async def show_popular(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏"""
        popular_queries = ["–¢–æ–ø 100", "–ù–æ–≤–∏–Ω–∫–∏", "–ß–∞—Ä—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏", "–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è"]
        
        keyboard = []
        for query in popular_queries:
            keyboard.append([KeyboardButton(f"üéØ {query}")])
        keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
        
        await update.message.reply_text(
            "üéµ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    
    async def search_by_genre(self, update: Update, genre: str):
        """–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É"""
        genre_queries = {
            "–†–æ–∫": "—Ä—É—Å—Å–∫–∏–π —Ä–æ–∫ 2024",
            "–ü–æ–ø": "–ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞ 2024",
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞",
            "–ö–ª–∞—Å—Å–∏–∫–∞": "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞",
            "–î–∂–∞–∑": "–¥–∂–∞–∑ –º—É–∑—ã–∫–∞",
            "–•–∏–ø-—Ö–æ–ø": "—Ä—É—Å—Å–∫–∏–π —Ö–∏–ø-—Ö–æ–ø 2024"
        }
        
        query = genre_queries.get(genre, genre)
        await self.perform_search(update, query)

    async def search_yandex_music(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ API"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'application/json',
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            search_url = "https://api.music.yandex.net/search"
            params = {
                'text': query,
                'type': 'track',
                'page': 0,
                'pageSize': 20
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(search_url, headers=headers, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self.parse_search_results(data)
                    else:
                        logger.error(f"API error: {response.status}")
                        return await self.fallback_search(query)
                        
        except Exception as e:
            logger.error(f"Search error: {e}")
            return await self.fallback_search(query)
    
    def parse_search_results(self, data: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        results = []
        
        try:
            tracks = data.get('result', {}).get('tracks', {}).get('results', [])
            
            for track in tracks:
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
                track_info = {
                    'id': str(track['id']),
                    'title': track['title'],
                    'artist': ', '.join(artist['name'] for artist in track['artists']),
                    'duration': track.get('durationMs', 0) // 1000,
                    'url': f"https://music.yandex.ru/album/{track['albums'][0]['id']}/track/{track['id']}",
                    'thumbnail': f"https://{track['coverUri'].replace('%%', '400x400')}" if track.get('coverUri') else None
                }
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ
                download_info = track.get('downloadInfo', [])
                if download_info:
                    download_url = download_info[0].get('downloadUrl')
                    if download_url:
                        track_info['audio_url'] = download_url
                
                results.append(track_info)
                
        except Exception as e:
            logger.error(f"Parse error: {e}")
        
        return results[:15]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    async def fallback_search(self, query: str) -> List[Dict]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept': 'application/json',
            }
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_url = f"https://music.yandex.ru/handlers/music-search.jsx"
            params = {
                'text': query,
                'type': 'tracks',
                'page': 0,
                'lang': 'ru'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(search_url, headers=headers, params=params, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        text = await response.text()
                        # –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSONP
                        if text.startswith('('):
                            text = text[1:-1]
                        data = json.loads(text)
                        return self.parse_fallback_results(data)
                    else:
                        return []
                        
        except Exception as e:
            logger.error(f"Fallback search error: {e}")
            return []
    
    def parse_fallback_results(self, data: Dict) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        results = []
        
        try:
            tracks = data.get('tracks', {}).get('items', [])
            
            for track in tracks[:15]:
                track_info = track.get('track') or track
                
                results.append({
                    'id': str(track_info['id']),
                    'title': track_info['title'],
                    'artist': ', '.join(artist['name'] for artist in track_info['artists']),
                    'duration': track_info.get('durationMs', 0) // 1000,
                    'url': f"https://music.yandex.ru/album/{track_info['albums'][0]['id']}/track/{track_info['id']}",
                    'thumbnail': f"https://{track_info['coverUri'].replace('%%', '300x300')}" if track_info.get('coverUri') else None,
                    'audio_url': None  # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
                })
                
        except Exception as e:
            logger.error(f"Fallback parse error: {e}")
        
        return results
    
    async def inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.inline_query.query
        
        if not query or len(query) < 2:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
            await update.inline_query.answer([
                InlineQueryResultAudio(
                    id="help",
                    audio_url="https://example.com/placeholder.mp3",
                    title="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏",
                    performer="–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–µ–º—Ñ–∏—Ä–∞, —Ä–æ–∫ –º—É–∑—ã–∫–∞, —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∏"
                )
            ], cache_time=300)
            return
        
        logger.info(f"Inline search: {query}")
        
        try:
            # –ò—â–µ–º –º—É–∑—ã–∫—É
            results = await self.search_yandex_music(query)
            
            inline_results = []
            
            for i, track in enumerate(results[:50]):
                try:
                    # –î–ª—è inline —Ä–µ–∂–∏–º–∞ –Ω—É–∂–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ
                    # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
                    audio_url = track.get('audio_url') or "https://example.com/placeholder.mp3"
                    
                    result = InlineQueryResultAudio(
                        id=f"{track['id']}_{hashlib.md5(query.encode()).hexdigest()[:8]}",
                        audio_url=audio_url,
                        title=track['title'][:64],
                        performer=track['artist'][:64],
                        audio_duration=track['duration'] or 180,
                        caption=f"üéµ {track['title']}\nüé§ {track['artist']}\n\nüíø –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞",
                        reply_markup=self.get_track_actions_keyboard(track['id'], track['url'])
                    )
                    inline_results.append(result)
                    
                except Exception as e:
                    logger.error(f"Error creating inline result: {e}")
                    continue
            
            if not inline_results:
                inline_results.append(
                    InlineQueryResultAudio(
                        id="no_results",
                        audio_url="https://example.com/placeholder.mp3",
                        title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        performer="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å"
                    )
                )
            
            await update.inline_query.answer(inline_results, cache_time=300, auto_pagination=True)
            
        except Exception as e:
            logger.error(f"Inline query error: {e}")
            await update.inline_query.answer([], cache_time=300)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üéµ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.app.run_polling()

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ yandex-music-api –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
class SimpleYandexMusicBot(YandexMusicBot):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    async def search_yandex_music(self, query: str) -> List[Dict]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π API –∑–∞–ø—Ä–æ—Å
            mock_results = [
                {
                    'id': '1',
                    'title': '–ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫–∞ 1',
                    'artist': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 1',
                    'duration': 180,
                    'url': 'https://music.yandex.ru/album/123/track/456',
                    'thumbnail': None,
                    'audio_url': 'https://example.com/audio1.mp3'
                },
                {
                    'id': '2', 
                    'title': '–ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫–∞ 2',
                    'artist': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 2',
                    'duration': 200,
                    'url': 'https://music.yandex.ru/album/789/track/012',
                    'thumbnail': None,
                    'audio_url': 'https://example.com/audio2.mp3'
                }
            ]
            
            # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
            return mock_results
            
        except Exception as e:
            logger.error(f"Simple search error: {e}")
            return []

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
    BOT_TOKEN = "8313764660:AAEOFtGphxmLLz7JKSa82a179-vTvjBu1lo"
    
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BOT_TOKEN")
        exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot = SimpleYandexMusicBot(BOT_TOKEN)
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        bot.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
