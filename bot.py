import logging
import aiohttp
import asyncio
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import TELEGRAM_BOT_TOKEN, DEEPSEEK_API_KEY, DEEPSEEK_API_URL, OPENROUTER_API_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class WorkingDeepSeekBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
        self.user_sessions = {}
        self.current_api = "deepseek"  # deepseek –∏–ª–∏ openrouter
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    def create_main_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–¥–µ—é"), KeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥")],
            [KeyboardButton("üîç –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É"), KeyboardButton("üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º")],
            [KeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"), KeyboardButton("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")],
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeepSeek –±–æ—Ç!

–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∑–∞–±–æ—Ç–æ–π –æ –≤–∞—Å! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.

‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é!
        """
        menu = self.create_main_menu()
        await update.message.reply_text(welcome_text, reply_markup=menu)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—É—é –ø–æ–¥–ø–∏—Å—å
        signature = """
        
üíù *–° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!* 
–û—Ç *–¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞* üöÄ

*P.S.* –ï—Å–ª–∏ —è –Ω–µ –æ—Ç–≤–µ—á–∞—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        await update.message.reply_text(signature, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
        status_text = "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å API..."
        await update.message.reply_text(status_text)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_response = await self.query_deepseek("–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'")
        
        if "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç" in test_response:
            status = "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! API –¥–æ—Å—Ç—É–ø–Ω–æ."
        else:
            status = "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º."
        
        status_message = f"""
üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:*

{status}

*–¢–µ–∫—É—â–∏–π API:* {self.current_api}
*–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:*
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å API –∞–∫–∫–∞—É–Ω—Ç–∞
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ

üíù *–° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!*
–û—Ç *–¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞* üöÄ
        """
        await update.message.reply_text(status_message, parse_mode='Markdown')
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
        menu_text = "üéõÔ∏è *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        menu = self.create_main_menu()
        await update.message.reply_text(menu_text, reply_markup=menu, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç!

‚ú® *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é:*

üí° *–ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–¥–µ—é* - —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–¥–µ–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ
üìù *–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥* - –ø–æ–º–æ—â—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏
üîç *–û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É* - –ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º
üéØ *–ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º* - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
üìö *–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É* - –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≥–∞–π–¥—ã
üîÑ *–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥* - –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ
üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É API

*–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
        
        # –ü–æ–¥–ø–∏—Å—å
        signature = """
        
üíù *–° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!* 
–û—Ç *–¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞* üöÄ
        """
        await update.message.reply_text(signature, parse_mode='Markdown')
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        user_id = update.effective_user.id
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        
        await update.message.reply_text(
            "üîÑ *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!* –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!",
            reply_markup=self.create_main_menu(),
            parse_mode='Markdown'
        )
    
    async def handle_menu_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if action == "üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–¥–µ—é":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –±–ª–æ–∫. –ü—Ä–µ–¥–ª–æ–∂–∏ 3-5 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –±–∏–∑–Ω–µ—Å, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ). –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º!"
        
        elif action == "üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏–º–µ—Ä –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ Python —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –û–±—ä—è—Å–Ω–∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç."
        
        elif action == "üîç –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É –∏–∑ –Ω–∞—É–∫–∏ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –æ–±—ä—è—Å–Ω–∏ –µ—ë –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –Ω–æ–≤–∏—á–∫—É. –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏."
        
        elif action == "üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç. –ó–∞–¥–∞–π –º–Ω–µ 5 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–µ–∫—Ç–µ, –∞ –∑–∞—Ç–µ–º –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏."
        
        elif action == "üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –≥–∞–π–¥ –∏–ª–∏ —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É. –°–¥–µ–ª–∞–π –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º."
        
        elif action == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥":
            await self.clear_command(update, context)
            return
        
        elif action == "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞":
            await self.status_command(update, context)
            return
        
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = await self.query_deepseek(prompt)
        await self.send_response(update, response)
    
    async def query_deepseek(self, prompt: str) -> str:
        """–£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not DEEPSEEK_API_KEY:
            return "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ DEEPSEEK_API_KEY –≤ —Ñ–∞–π–ª .env"
        
        # –ü—Ä–æ–±—É–µ–º DeepSeek API
        deepseek_response = await self.try_deepseek_api(prompt)
        if deepseek_response and not any(error in deepseek_response for error in ["‚ùå", "‚è∞", "402"]):
            self.current_api = "deepseek"
            return deepseek_response
        
        # –ï—Å–ª–∏ DeepSeek –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        self.current_api = "local_fallback"
        return await self.get_fallback_response(prompt)
    
    async def try_deepseek_api(self, prompt: str) -> str:
        """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API"""
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": """–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
                    –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º. –î–æ–±–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã."""
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 2000,
            "temperature": 0.7,
            "stream": False
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    DEEPSEEK_API_URL, 
                    headers=headers, 
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status == 200:
                        result = await response.json()
                        return result['choices'][0]['message']['content']
                    elif response.status == 402:
                        return "‚ùå –û—à–∏–±–∫–∞ 402: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ DeepSeek."
                    else:
                        error_text = await response.text()
                        logger.error(f"DeepSeek API error: {response.status}")
                        return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}"
                        
        except asyncio.TimeoutError:
            return "‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
    
    async def get_fallback_response(self, prompt: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"""
        fallback_responses = {
            "–∏–¥–µ": "üí° *–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ –æ—Ç –¢–∏–º—É—Ä–∞:*\n\n1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏\n2. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–∏–≤—ã—á–µ–∫\n3. –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n\nüöÄ *–ù–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!*",
            "–∫–æ–¥": "üìù *–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –Ω–∞ Python:*\n\n```python\n# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç\nimport logging\nfrom telegram import Update\nfrom telegram.ext import Application, CommandHandler\n\nasync def start(update: Update, context):\n    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç!')\n\n# –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –∏ –º–µ–Ω—è–π—Ç–µ –º–∏—Ä! üåü```",
            "–æ–±—ä—è—Å–Ω": "üîç *–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ò–ò –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:*\n\n–ò–ò - —ç—Ç–æ –∫–∞–∫ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã —É—á–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –º–Ω–æ–≥–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∫–æ—à–µ–∫, –∏ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç —É–∑–Ω–∞–≤–∞—Ç—å –∫–æ—à–µ–∫ everywhere!\n\nüéØ *–í—Å—ë –≥–µ–Ω–∏–∞–ª—å–Ω–æ–µ - –ø—Ä–æ—Å—Ç–æ!*",
            "–ø—Ä–æ–µ–∫—Ç": "üéØ *–ü–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞:*\n\n1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª—å\n2. –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω\n3. –°–æ–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n4. –î–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ —à–∞–≥–∞–º\n5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\nüí™ *–í—ã —Å–º–æ–∂–µ—Ç–µ! –í–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è!*",
            "—Å–ø—Ä–∞–≤–∫": "üìö *–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n\n‚Ä¢ –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ\n‚Ä¢ –£—á–∏—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ —á—É—Ç—å-—á—É—Ç—å\n‚Ä¢ –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫ - –æ–Ω–∏ —É—á–∞—Ç\n‚Ä¢ –ò—â–∏—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n\nüåü *–†–∞–∑–≤–∏–≤–∞–π—Ç–µ—Å—å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!*"
        }
        
        prompt_lower = prompt.lower()
        for key, response in fallback_responses.items():
            if key in prompt_lower:
                return response
        
        return """ü§ñ *–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!* 

–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–µ AI-—Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —ç—Ç–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –Ω–∞—Å!

üíù *–° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º,*
*–¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤* üöÄ

*P.S.* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API"""
    
    async def send_response(self, update: Update, response: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥–ø–∏—Å—å—é"""
        signature = "\n\nüíù *–° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!* \n–û—Ç *–¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞* üöÄ"
        
        full_response = response + signature
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(full_response) > 4000:
            parts = []
            while len(full_response) > 4000:
                part = full_response[:4000]
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                last_newline = part.rfind('\n')
                if last_newline > 3500:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—É–º–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
                    parts.append(part[:last_newline])
                    full_response = full_response[last_newline+1:]
                else:
                    parts.append(part)
                    full_response = full_response[4000:]
            parts.append(full_response)
            
            for part in parts:
                await update.message.reply_text(part, parse_mode='Markdown')
        else:
            await update.message.reply_text(full_response, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ–º –∏–∑ –º–µ–Ω—é
        menu_actions = [
            "üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–¥–µ—é", "üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥", "üîç –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É",
            "üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º", "üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É", "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
        ]
        
        if user_message in menu_actions:
            await self.handle_menu_actions(update, context, user_message)
            return
        
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = await self.query_deepseek(user_message)
        await self.send_response(update, response)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_chat:
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_message
            )
    
    async def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
        commands = [
            ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
            ("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
            ("clear", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
            ("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        ]
        await self.application.bot.set_my_commands(commands)
    
    async def post_init(self, application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
        await self.setup_commands()
        logging.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.post_init = self.post_init
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = WorkingDeepSeekBot()
    bot.run()
    
