import os
import logging
import asyncio
import requests
from telegram import Update, InlineQueryResultAudio, InputTextMessageContent, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, InlineQueryHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import aiohttp
import json
from typing import List, Dict
import hashlib
import tempfile
import uuid
from urllib.parse import quote

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class YandexMusicBot:
    def __init__(self, token: str, yandex_token: str = None):
        self.token = token
        self.yandex_token = yandex_token or os.getenv('YANDEX_MUSIC_TOKEN')
        self.app = Application.builder().token(token).build()
        self.setup_handlers()
        self.download_dir = "downloads"
        os.makedirs(self.download_dir, exist_ok=True)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        self.app.add_handler(CommandHandler("search", self.search_command))
        self.app.add_handler(CommandHandler("menu", self.show_menu))
        self.app.add_handler(CommandHandler("download", self.download_command))
        self.app.add_handler(InlineQueryHandler(self.inline_query))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            [KeyboardButton("üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏"), KeyboardButton("üéµ –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ")],
            [KeyboardButton("üìñ –ü–æ–º–æ—â—å"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
    
    def get_search_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        keyboard = [
            [KeyboardButton("üé∏ –†–æ–∫"), KeyboardButton("üé§ –ü–æ–ø"), KeyboardButton("üéß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")],
            [KeyboardButton("üéµ –ö–ª–∞—Å—Å–∏–∫–∞"), KeyboardButton("üéº –î–∂–∞–∑"), KeyboardButton("üéπ –•–∏–ø-—Ö–æ–ø")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def get_track_actions_keyboard(self, track_id: str, track_url: str, can_download: bool = True):
        """–ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–µ–∫–æ–º"""
        keyboard = [
            [
                InlineKeyboardButton("üéµ –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{track_id}"),
                InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å", url=track_url)
            ]
        ]
        
        if can_download:
            keyboard.append([
                InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", callback_data=f"play_{track_id}"),
                InlineKeyboardButton("üîç –ü–æ—Ö–æ–∂–∏–µ", callback_data=f"similar_{track_id}")
            ])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –ë–æ—Ç!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, —Å–∫–∞—á–∞—Ç—å –∏ –ø–æ—Å–ª—É—à–∞—Ç—å –ª—é–±—É—é –º—É–∑—ã–∫—É.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            "‚Ä¢ üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏\n"
            "‚Ä¢ üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤\n"
            "‚Ä¢ üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏\n"
            "‚Ä¢ üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        
        if update.message:
            await update.message.reply_text(
                welcome_text,
                reply_markup=self.get_main_keyboard(),
                parse_mode='Markdown'
            )
    
    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.get_main_keyboard()
        )
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üéµ –ü–æ–º–æ—â—å –ø–æ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –±–æ—Ç—É:\n\n"
            "üîç **–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏'\n"
            "‚Ä¢ –ò–ª–∏ –∫–æ–º–∞–Ω–¥—É /search <–∑–∞–ø—Ä–æ—Å>\n"
            "‚Ä¢ –ò–ª–∏ inline —Ä–µ–∂–∏–º: @your_bot_username <–∑–∞–ø—Ä–æ—Å>\n\n"
            "üéµ **–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ:**\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏' –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç—ã\n\n"
            "üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ:**\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üéµ –°–∫–∞—á–∞—Ç—å' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞\n"
            "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /download <–∑–∞–ø—Ä–æ—Å>\n\n"
            "üéØ **–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä–∞–º:**\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ' –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–±–æ—Ä–æ–∫"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")],
            [InlineKeyboardButton("üìö –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="examples")]
        ]
        
        await update.message.reply_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        if not context.args:
            await update.message.reply_text(
                "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                reply_markup=self.get_search_keyboard()
            )
            return
        
        query = ' '.join(context.args)
        await self.perform_search(update, query)
    
    async def download_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /download"""
        if not context.args:
            await update.message.reply_text(
                "üì• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /download –ó–µ–º—Ñ–∏—Ä–∞ –•–æ—á–µ—à—å"
            )
            return
        
        query = ' '.join(context.args)
        await self.perform_download_search(update, query)
    
    async def perform_download_search(self, update: Update, query: str):
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        search_message = await update.message.reply_text(f"üîç –ò—â—É: **{query}**...", parse_mode='Markdown')
        
        results = await self.search_yandex_music(query)
        
        if not results:
            await search_message.edit_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É **{query}** –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode='Markdown')
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        message_text = f"üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (**{query}**):\n\n"
        for i, track in enumerate(results[:5], 1):
            duration = self.format_duration(track['duration'])
            message_text += f"{i}. **{track['title']}** - {track['artist']} ({duration})\n"
        
        keyboard = []
        for i, track in enumerate(results[:5], 1):
            keyboard.append([
                InlineKeyboardButton(
                    f"üì• {i}. {track['title'][:20]}...", 
                    callback_data=f"dl_{track['id']}"
                )
            ])
        
        await search_message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def perform_search(self, update: Update, query: str, page: int = 0):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            search_message = await update.message.reply_text(f"üîç –ò—â—É: **{query}**...", parse_mode='Markdown')
            
            results = await self.search_yandex_music(query)
            
            if not results:
                await search_message.edit_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É **{query}** –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode='Markdown')
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            message_text = f"üéµ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É **{query}**:\n\n"
            for i, track in enumerate(results[:5], 1):
                duration = self.format_duration(track['duration'])
                message_text += f"{i}. **{track['title']}** - {track['artist']} ({duration})\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = []
            for i, track in enumerate(results[:3], 1):
                keyboard.append([
                    InlineKeyboardButton(
                        f"üéµ {i}. {track['title'][:15]}...", 
                        callback_data=f"play_{track['id']}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫", callback_data=f"dlsearch_{query}"),
                InlineKeyboardButton("üîç –ï—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"next_{query}_1")
            ])
            
            await search_message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Search error: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("play_"):
            track_id = data.split("_")[1]
            await self.play_track(query, track_id)
        
        elif data.startswith("download_"):
            track_id = data.split("_")[1]
            await self.download_track(query, track_id)
        
        elif data.startswith("dl_"):
            track_id = data.split("_")[1]
            await self.download_track_callback(query, track_id)
        
        elif data.startswith("dlsearch_"):
            search_query = data.split("_", 1)[1]
            await self.perform_download_search_callback(query, search_query)
        
        elif data.startswith("next_"):
            parts = data.split("_")
            search_query = parts[1]
            page = int(parts[2])
            await self.show_next_results(query, search_query, page)
        
        elif data == "examples":
            await self.show_examples(query)
    
    async def play_track(self, query, track_id):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫"""
        try:
            await query.edit_message_text("üéµ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            track_info = await self.get_track_info(track_id)
            if not track_info:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ
            if track_info.get('audio_url'):
                await query.edit_message_text(
                    f"üéµ **{track_info['title']}**\n"
                    f"üé§ {track_info['artist']}\n"
                    f"‚è± {self.format_duration(track_info['duration'])}\n\n"
                    "‚ñ∂Ô∏è –¢—Ä–µ–∫ –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é!",
                    parse_mode='Markdown',
                    reply_markup=self.get_track_actions_keyboard(track_id, track_info['url'], True)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
                await query.message.reply_audio(
                    audio=track_info['audio_url'],
                    title=track_info['title'],
                    performer=track_info['artist'],
                    duration=track_info['duration'],
                    reply_markup=self.get_track_actions_keyboard(track_id, track_info['url'], False)
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                await query.edit_message_text(
                    f"üéµ **{track_info['title']}**\n"
                    f"üé§ {track_info['artist']}\n\n"
                    "‚ö†Ô∏è –ü—Ä—è–º–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
                    parse_mode='Markdown',
                    reply_markup=self.get_track_actions_keyboard(track_id, track_info['url'], True)
                )
                
        except Exception as e:
            logger.error(f"Play track error: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞")
    
    async def download_track_callback(self, query, track_id):
        """–°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ (callback –≤–µ—Ä—Å–∏—è)"""
        await self.download_track(query, track_id, is_callback=True)
    
    async def download_track(self, query, track_id, is_callback=False):
        """–°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫"""
        try:
            if is_callback:
                await query.edit_message_text("üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            else:
                await query.answer("–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            track_info = await self.get_track_info(track_id)
            if not track_info:
                if is_callback:
                    await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ")
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫
            download_result = await self.download_audio_file(track_info)
            
            if download_result and download_result.get('success'):
                file_path = download_result['file_path']
                file_size = os.path.getsize(file_path) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ MB
                
                if is_callback:
                    await query.edit_message_text(
                        f"‚úÖ **{track_info['title']}**\n"
                        f"üé§ {track_info['artist']}\n"
                        f"üíæ –†–∞–∑–º–µ—Ä: {file_size:.1f} MB\n\n"
                        "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
                        parse_mode='Markdown'
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(file_path, 'rb') as audio_file:
                    await query.message.reply_audio(
                        audio=audio_file,
                        title=track_info['title'],
                        performer=track_info['artist'],
                        duration=track_info['duration'],
                        caption=f"üéµ {track_info['title']}\nüé§ {track_info['artist']}",
                        reply_markup=self.get_track_actions_keyboard(track_id, track_info['url'], False)
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(file_path)
                
            else:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É."
                if is_callback:
                    await query.edit_message_text(
                        error_msg,
                        reply_markup=self.get_track_actions_keyboard(track_id, track_info['url'], True)
                    )
                else:
                    await query.message.reply_text(error_msg)
                    
        except Exception as e:
            logger.error(f"Download track error: {e}")
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞"
            if is_callback:
                await query.edit_message_text(error_msg)
            else:
                await query.message.reply_text(error_msg)
    
    async def perform_download_search_callback(self, query, search_query):
        """–ü–æ–∏—Å–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (callback –≤–µ—Ä—Å–∏—è)"""
        await query.edit_message_text(f"üîç –ò—â—É: **{search_query}**...", parse_mode='Markdown')
        
        results = await self.search_yandex_music(search_query)
        
        if not results:
            await query.edit_message_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É **{search_query}** –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode='Markdown')
            return
        
        message_text = f"üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (**{search_query}**):\n\n"
        for i, track in enumerate(results[:5], 1):
            duration = self.format_duration(track['duration'])
            message_text += f"{i}. **{track['title']}** - {track['artist']} ({duration})\n"
        
        keyboard = []
        for i, track in enumerate(results[:5], 1):
            keyboard.append([
                InlineKeyboardButton(
                    f"üì• {i}. {track['title'][:20]}...", 
                    callback_data=f"dl_{track['id']}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data=f"back_search_{search_query}")
        ])
        
        await query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def show_next_results(self, query, search_query, page):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            results = await self.search_yandex_music(search_query)
            
            if not results or len(results) <= page * 5:
                await query.edit_message_text("‚ùå –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
                return
            
            start_idx = page * 5
            end_idx = start_idx + 5
            
            message_text = f"üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É **{search_query}** (—Å—Ç—Ä. {page+1}):\n\n"
            for i, track in enumerate(results[start_idx:end_idx], start_idx + 1):
                duration = self.format_duration(track['duration'])
                message_text += f"{i}. **{track['title']}** - {track['artist']} ({duration})\n"
            
            keyboard = []
            for i, track in enumerate(results[start_idx:start_idx+3], start_idx + 1):
                keyboard.append([
                    InlineKeyboardButton(
                        f"üéµ {i}. {track['title'][:15]}...", 
                        callback_data=f"play_{track['id']}"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination_buttons = []
            if page > 0:
                pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"next_{search_query}_{page-1}"))
            
            if len(results) > end_idx:
                pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_{search_query}_{page+1}"))
            
            if pagination_buttons:
                keyboard.append(pagination_buttons)
            
            keyboard.append([
                InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫", callback_data=f"dlsearch_{search_query}"),
                InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")
            ])
            
            await query.edit_message_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"Next results error: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    async def show_examples(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        examples_text = (
            "üéØ **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞:**\n\n"
            "‚Ä¢ `–ó–µ–º—Ñ–∏—Ä–∞` - –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
            "‚Ä¢ `–õ—é–±—ç –ü–æ–∑–æ–≤–∏ –º–µ–Ω—è` - —Ç—Ä–µ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ `—Ä–æ–∫ 90-—Ö` - –º—É–∑—ã–∫–∞ –ø–æ –∂–∞–Ω—Ä—É\n"
            "‚Ä¢ `—Å–∞—É–Ω–¥—Ç—Ä–µ–∫ –∏–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä` - —Å–∞—É–Ω–¥—Ç—Ä–µ–∫–∏\n"
            "‚Ä¢ `–¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏` - –ø–æ–¥–±–æ—Ä–∫–∏\n\n"
            "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /download –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫", switch_inline_query_current_chat="")],
            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É", callback_data="download_example")]
        ]
        
        await query.edit_message_text(
            examples_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)"""
        text = update.message.text
        
        if text == "üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
                reply_markup=self.get_search_keyboard()
            )
        
        elif text == "üéµ –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ":
            await self.show_popular(update)
        
        elif text == "üìñ –ü–æ–º–æ—â—å":
            await self.help(update, context)
        
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await update.message.reply_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
                "‚Ä¢ –§–æ—Ä–º–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: MP3\n"
                "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ\n"
                "‚Ä¢ –õ–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞: 20 —Ç—Ä–µ–∫–æ–≤\n\n"
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!"
            )
        
        elif text == "üîô –ù–∞–∑–∞–¥":
            await self.show_menu(update, context)
        
        elif text in ["üé∏ –†–æ–∫", "üé§ –ü–æ–ø", "üéß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "üéµ –ö–ª–∞—Å—Å–∏–∫–∞", "üéº –î–∂–∞–∑", "üéπ –•–∏–ø-—Ö–æ–ø"]:
            genre = text.split(" ")[1]
            await self.search_by_genre(update, genre)
        
        elif text.startswith("üéØ "):
            query = text[2:]
            await self.perform_search(update, query)
        
        else:
            await self.perform_search(update, text)
    
    async def show_popular(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–∫–∏"""
        popular_queries = ["–¢–æ–ø 100", "–ù–æ–≤–∏–Ω–∫–∏", "–ß–∞—Ä—Ç –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏", "–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è"]
        
        keyboard = []
        for query in popular_queries:
            keyboard.append([KeyboardButton(f"üéØ {query}")])
        keyboard.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
        
        await update.message.reply_text(
            "üéµ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
    
    async def search_by_genre(self, update: Update, genre: str):
        """–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É"""
        genre_queries = {
            "–†–æ–∫": "—Ä—É—Å—Å–∫–∏–π —Ä–æ–∫ 2024",
            "–ü–æ–ø": "–ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞ 2024",
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞",
            "–ö–ª–∞—Å—Å–∏–∫–∞": "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞",
            "–î–∂–∞–∑": "–¥–∂–∞–∑ –º—É–∑—ã–∫–∞",
            "–•–∏–ø-—Ö–æ–ø": "—Ä—É—Å—Å–∫–∏–π —Ö–∏–ø-—Ö–æ–ø 2024"
        }
        
        query = genre_queries.get(genre, genre)
        await self.perform_search(update, query)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–∑—ã–∫–æ–π
    async def search_yandex_music(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API
            return await self.mock_search_results(query)
            
        except Exception as e:
            logger.error(f"Search error: {e}")
            return await self.mock_search_results(query)
    
    async def mock_search_results(self, query: str) -> List[Dict]:
        """–ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
        mock_data = {
            "–∑–µ–º—Ñ–∏—Ä–∞": [
                {
                    'id': 'zemfira_1',
                    'title': '–•–æ—á–µ—à—å',
                    'artist': '–ó–µ–º—Ñ–∏—Ä–∞',
                    'duration': 240,
                    'url': 'https://music.yandex.ru/album/123/track/456',
                    'thumbnail': None,
                    'audio_url': 'https://example.com/audio1.mp3'
                },
                {
                    'id': 'zemfira_2',
                    'title': '–ò—Å–∫–∞–ª–∞',
                    'artist': '–ó–µ–º—Ñ–∏—Ä–∞',
                    'duration': 210,
                    'url': 'https://music.yandex.ru/album/123/track/789',
                    'thumbnail': None,
                    'audio_url': 'https://example.com/audio2.mp3'
                }
            ],
            "—Ä–æ–∫": [
                {
                    'id': 'rock_1',
                    'title': '–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏',
                    'artist': '–ö–∏–Ω–æ',
                    'duration': 290,
                    'url': 'https://music.yandex.ru/album/456/track/123',
                    'thumbnail': None,
                    'audio_url': 'https://example.com/audio3.mp3'
                }
            ]
        }
        
        query_lower = query.lower()
        for key in mock_data:
            if key in query_lower:
                return mock_data[key]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
        return [
            {
                'id': f'track_{hashlib.md5(query.encode()).hexdigest()[:8]}',
                'title': f'–ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–∫–∞ ({query})',
                'artist': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                'duration': 180,
                'url': f'https://music.yandex.ru/search?text={quote(query)}',
                'thumbnail': None,
                'audio_url': 'https://example.com/audio_sample.mp3'
            }
        ]
    
    async def get_track_info(self, track_id: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –ø–æ ID"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
            # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            mock_tracks = {
                'zemfira_1': {
                    'id': 'zemfira_1',
                    'title': '–•–æ—á–µ—à—å',
                    'artist': '–ó–µ–º—Ñ–∏—Ä–∞',
                    'duration': 240,
                    'url': 'https://music.yandex.ru/album/123/track/456',
                    'thumbnail': None,
                    'audio_url': 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'  # –†–µ–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
                },
                'zemfira_2': {
                    'id': 'zemfira_2', 
                    'title': '–ò—Å–∫–∞–ª–∞',
                    'artist': '–ó–µ–º—Ñ–∏—Ä–∞',
                    'duration': 210,
                    'url': 'https://music.yandex.ru/album/123/track/789',
                    'thumbnail': None,
                    'audio_url': 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3'
                },
                'rock_1': {
                    'id': 'rock_1',
                    'title': '–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏',
                    'artist': '–ö–∏–Ω–æ',
                    'duration': 290,
                    'url': 'https://music.yandex.ru/album/456/track/123',
                    'thumbnail': None,
                    'audio_url': 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3'
                }
            }
            
            # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if track_id not in mock_tracks:
                return {
                    'id': track_id,
                    'title': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫',
                    'artist': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                    'duration': 180,
                    'url': f'https://music.yandex.ru/track/{track_id}',
                    'thumbnail': None,
                    'audio_url': None
                }
            
            return mock_tracks[track_id]
            
        except Exception as e:
            logger.error(f"Get track info error: {e}")
            return None
    
    async def download_audio_file(self, track_info: Dict) -> Dict:
        """–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
        try:
            if not track_info.get('audio_url'):
                return {'success': False, 'error': 'No audio URL'}
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            filename = f"{track_info['id']}_{uuid.uuid4().hex[:8]}.mp3"
            file_path = os.path.join(self.download_dir, filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with aiohttp.ClientSession() as session:
                async with session.get(track_info['audio_url']) as response:
                    if response.status == 200:
                        with open(file_path, 'wb') as f:
                            while True:
                                chunk = await response.content.read(8192)
                                if not chunk:
                                    break
                                f.write(chunk)
                        
                        return {'success': True, 'file_path': file_path}
                    else:
                        return {'success': False, 'error': f'HTTP {response.status}'}
                        
        except Exception as e:
            logger.error(f"Download audio error: {e}")
            return {'success': False, 'error': str(e)}
    
    def format_duration(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞"""
        if not seconds:
            return "0:00"
        
        minutes = seconds // 60
        seconds = seconds % 60
        return f"{minutes}:{seconds:02d}"
    
    async def inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.inline_query.query
        
        if not query or len(query) < 2:
            await update.inline_query.answer([
                InlineQueryResultAudio(
                    id="help",
                    audio_url="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3",
                    title="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏",
                    performer="–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–µ–º—Ñ–∏—Ä–∞, —Ä–æ–∫ –º—É–∑—ã–∫–∞"
                )
            ], cache_time=300)
            return
        
        logger.info(f"Inline search: {query}")
        
        try:
            results = await self.search_yandex_music(query)
            
            inline_results = []
            
            for i, track in enumerate(results[:50]):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    audio_url = track.get('audio_url') or f"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-{(i % 3) + 1}.mp3"
                    
                    result = InlineQueryResultAudio(
                        id=f"{track['id']}_{hashlib.md5(query.encode()).hexdigest()[:8]}",
                        audio_url=audio_url,
                        title=track['title'][:64],
                        performer=track['artist'][:64],
                        audio_duration=track['duration'] or 180,
                        caption=f"üéµ {track['title']}\nüé§ {track['artist']}\n\nüíø –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞",
                        reply_markup=self.get_track_actions_keyboard(track['id'], track['url'], True)
                    )
                    inline_results.append(result)
                    
                except Exception as e:
                    logger.error(f"Error creating inline result: {e}")
                    continue
            
            if not inline_results:
                inline_results.append(
                    InlineQueryResultAudio(
                        id="no_results",
                        audio_url="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3",
                        title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        performer="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å"
                    )
                )
            
            await update.inline_query.answer(inline_results, cache_time=300, auto_pagination=True)
            
        except Exception as e:
            logger.error(f"Inline query error: {e}")
            await update.inline_query.answer([], cache_time=300)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üéµ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã!")
        print("‚ö†Ô∏è  –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏ –∑–∞–º–µ–Ω–∏—Ç–µ mock-–º–µ—Ç–æ–¥—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã")
        self.app.run_polling()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    BOT_TOKEN = "8313764660:AAEOFtGphxmLLz7JKSa82a179-vTvjBu1lo"
    
    if not BOT_TOKEN or BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π BOT_TOKEN")
        exit(1)
    
    try:
        bot = YandexMusicBot(BOT_TOKEN)
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
        bot.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
