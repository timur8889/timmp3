import logging
import json
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.executor import set_webhook
from flask import Flask, render_template, jsonify, request

from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher(bot)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_sessions = {}
playlists = {}

class HitmosAPI:
    def __init__(self):
        self.base_url = Config.HITMOS_API_URL
    
    async def search_music(self, query: str):
        """–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –Ω–∞ Hitmos.me"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/search", params={"q": query}) as response:
                    if response.status == 200:
                        return await response.json()
        except Exception as e:
            logging.error(f"Error searching music: {e}")
            return []
    
    async def get_track_url(self, track_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ç—Ä–µ–∫–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/track/{track_id}") as response:
                    if response.status == 200:
                        data = await response.json()
                        return data.get('url')
        except Exception as e:
            logging.error(f"Error getting track URL: {e}")
            return None

hitmos_api = HitmosAPI()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    welcome_text = """
üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä! üéµ

*–° –ª—é–±–æ–≤—å—é –∫ –Ω–∞—à–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ—Ç –¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞*

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:
‚Ä¢ üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ —Å Hitmos.me
‚Ä¢ ‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤
‚Ä¢ üì± –£–¥–æ–±–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä!
    """
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            "üéµ –û—Ç–∫—Ä—ã—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä",
            web_app=WebAppInfo(url=f"{Config.WEBHOOK_URL}/player")
        ),
        InlineKeyboardButton(
            "üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏",
            callback_data="search_music"
        )
    )
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'search_music')
async def process_search(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫)
@dp.message_handler(content_types=types.ContentType.TEXT)
async def process_text_message(message: types.Message):
    search_query = message.text
    
    await message.answer(f"üîç –ò—â—É –º—É–∑—ã–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É: {search_query}")
    
    # –ü–æ–∏—Å–∫ –Ω–∞ Hitmos.me
    results = await hitmos_api.search_music(search_query)
    
    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for i, track in enumerate(results[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard.add(
            InlineKeyboardButton(
                f"üéµ {track.get('title', 'Unknown')} - {track.get('artist', 'Unknown')}",
                callback_data=f"play_{track.get('id')}"
            )
        )
    
    keyboard.add(
        InlineKeyboardButton(
            "üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø–ª–µ–µ—Ä–µ",
            web_app=WebAppInfo(url=f"{Config.WEBHOOK_URL}/player?search={search_query}")
        )
    )
    
    await message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith('play_'))
async def process_play_track(callback_query: types.CallbackQuery):
    track_id = callback_query.data.replace('play_', '')
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Ç—Ä–µ–∫–∞
    track_url = await hitmos_api.get_track_url(track_id)
    
    if track_url:
        await callback_query.message.answer_audio(
            track_url,
            caption="üéµ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º—É–∑—ã–∫–æ–π! \n*–° –ª—é–±–æ–≤—å—é –∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º - –¢–∏–º—É—Ä –ê–Ω–¥—Ä–µ–µ–≤*",
            parse_mode="Markdown"
        )
    else:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫", show_alert=True)

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–ª–µ–µ—Ä–∞
@app.route('/player')
def player():
    search_query = request.args.get('search', '')
    return render_template('player.html', search_query=search_query)

# API –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
@app.route('/api/search')
async def api_search():
    query = request.args.get('q', '')
    if not query:
        return jsonify([])
    
    results = await hitmos_api.search_music(query)
    return jsonify(results)

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
@app.route('/api/track/<track_id>')
async def api_track(track_id):
    track_url = await hitmos_api.get_track_url(track_id)
    return jsonify({'url': track_url})

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    set_webhook(
        dispatcher=dp,
        webhook_path='/webhook',
        skip_updates=True,
        on_startup=None,
        on_shutdown=None,
        web_app=app,
        host=Config.WEBAPP_HOST,
        port=Config.WEBAPP_PORT
    )
