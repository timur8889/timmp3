import logging
import aiohttp
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import TELEGRAM_BOT_TOKEN, DEEPSEEK_API_KEY, DEEPSEEK_API_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class WorkingDeepSeekBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
        self.user_sessions = {}
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    def create_main_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton("üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–¥–µ—é"), KeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥")],
            [KeyboardButton("üîç –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É"), KeyboardButton("üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º")],
            [KeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"), KeyboardButton("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeepSeek –±–æ—Ç!

–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ DeepSeek. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!

‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é!
        """
        menu = self.create_main_menu()
        await update.message.reply_text(welcome_text, reply_markup=menu)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—É—é –ø–æ–¥–ø–∏—Å—å
        signature = """
        
üíù –° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º! 
–û—Ç –¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞ üöÄ
        """
        await update.message.reply_text(signature)
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
        menu_text = "üéõÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        menu = self.create_main_menu()
        await update.message.reply_text(menu_text, reply_markup=menu)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.

‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:

üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–¥–µ—é - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∏–¥–µ–π
üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ - –ø–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
üîç –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É - —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ - –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ

–ö–æ–º–∞–Ω–¥—ã:
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É"
‚Ä¢ "–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ Python –¥–ª—è —Å–∞–π—Ç–∞"
‚Ä¢ "–ü–æ–º–æ–≥–∏ —Å –∏–¥–µ–µ–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞"
        """
        await update.message.reply_text(help_text)
        
        # –ü–æ–¥–ø–∏—Å—å
        signature = """
        
üíù –° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º! 
–û—Ç –¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞ üöÄ
        """
        await update.message.reply_text(signature)
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        user_id = update.effective_user.id
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        
        await update.message.reply_text(
            "üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!",
            reply_markup=self.create_main_menu()
        )
    
    async def handle_menu_actions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if action == "üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–¥–µ—é":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –±–ª–æ–∫. –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞? –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –±–∏–∑–Ω–µ—Å, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥."
        
        elif action == "üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ú–æ–∂–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç? –£–∫–∞–∂–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–¥–∞—á—É."
        
        elif action == "üîç –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ä—è—Å–Ω–∏ —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É –∏–∑ –Ω–∞—É–∫–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –æ–±—ä—è—Å–Ω–∏ –µ—ë —Ç–∞–∫, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –¥–∞–∂–µ –Ω–æ–≤–∏—á–∫—É."
        
        elif action == "üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å. –ú–æ–∂–µ—à—å –≤—ã—Å—Ç—É–ø–∏—Ç—å –≤ —Ä–æ–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞? –ó–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –º–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—É—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º."
        
        elif action == "üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É":
            prompt = "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ª–µ–∑–Ω—É—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–∞–π–¥, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, —á–µ–∫-–ª–∏—Å—Ç –∏–ª–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É."
        
        elif action == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥":
            await self.clear_command(update, context)
            return
        
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
        response = await self.query_deepseek(prompt)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –æ—Ç–≤–µ—Ç—É
        response_with_signature = f"{response}\n\nüíù –° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º! \n–û—Ç –¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞ üöÄ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if len(response_with_signature) > 4000:
            part1 = response[:2000]
            part2 = response[2000:4000] + "\n\nüíù –° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º! \n–û—Ç –¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞ üöÄ"
            await update.message.reply_text(part1)
            await update.message.reply_text(part2)
        else:
            await update.message.reply_text(response_with_signature)
    
    async def query_deepseek(self, prompt: str) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
        if not DEEPSEEK_API_KEY:
            return "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á DeepSeek –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env"
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
        }
        
        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": """–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Ç–æ—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
                    –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 2048,
            "temperature": 0.7,
            "stream": False
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    DEEPSEEK_API_URL, 
                    headers=headers, 
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    if response.status == 200:
                        result = await response.json()
                        return result['choices'][0]['message']['content']
                    else:
                        error_text = await response.text()
                        logging.error(f"DeepSeek API error: {response.status} - {error_text}")
                        return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
        except asyncio.TimeoutError:
            return "‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ–º –∏–∑ –º–µ–Ω—é
        menu_actions = [
            "üí° –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∏–¥–µ—é", "üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥", "üîç –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É",
            "üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º", "üìö –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É", "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"
        ]
        
        if user_message in menu_actions:
            await self.handle_menu_actions(update, context, user_message)
            return
        
        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
        response = await self.query_deepseek(user_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        response_with_signature = f"{response}\n\nüíù –° –ª—é–±–æ–≤—å—é –∫ –º–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º! \n–û—Ç –¢–∏–º—É—Ä–∞ –ê–Ω–¥—Ä–µ–µ–≤–∞ üöÄ"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response_with_signature) > 4000:
            for i in range(0, len(response_with_signature), 4000):
                await update.message.reply_text(response_with_signature[i:i+4000])
        else:
            await update.message.reply_text(response_with_signature)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_chat:
            error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_message
            )
    
    async def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
        commands = [
            ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å"),
            ("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
            ("clear", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        ]
        await self.application.bot.set_my_commands(commands)
    
    async def post_init(self, application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
        await self.setup_commands()
        logging.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.post_init = self.post_init
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = WorkingDeepSeekBot()
    bot.run()
